import {IDBTransactionCreateContact} from "@/indexedDB/queries"
import type { Contact } from "@/types/entity";
import type { Ref } from "vue";

const names = [
    "Smith",
    "Johnson",
    "Williams",
    "Brown",
    "Jones",
    "Garcia",
    "Miller",
    "Davis",
    "Rodriguez",
    "Martinez",
    "Hernandez",
    "Lopez",
    "Gonzalez",
    "Wilson",
    "Anderson",
    "Thomas",
    "Taylor",
    "Moore",
    "Jackson",
    "Martin",
    "Lee",
    "Perez",
    "Thompson",
    "White",
    "Harris",
    "Sanchez",
    "Clark",
    "Ramirez",
    "Lewis",
    "Robinson",
    "Walker",
    "Young",
    "Allen",
    "King",
    "Wright",
    "Scott",
    "Torres",
    "Nguyen",
    "Hill",
    "Flores",
    "Green",
    "Adams",
    "Nelson",
    "Baker",
    "Hall",
    "Rivera",
    "Campbell",
    "Mitchell",
    "Carter",
    "Roberts",
    "Gomez",
    "Phillips",
    "Evans",
    "Turner",
    "Diaz",
    "Parker",
    "Cruz",
    "Edwards",
    "Collins",
    "Reyes",
    "Stewart",
    "Morris",
    "Morales",
    "Murphy",
    "Cook",
    "Rogers",
    "Gutierrez",
    "Ortiz",
    "Morgan",
    "Cooper",
    "Peterson",
    "Bailey",
    "Reed",
    "Kelly",
    "Howard",
    "Ramos",
    "Kim",
    "Cox",
    "Ward",
    "Richardson",
    "Watson",
    "Brooks",
    "Chavez",
    "Wood",
    "James",
    "Bennett",
    "Gray",
    "Mendoza",
    "Ruiz",
    "Hughes",
    "Price",
    "Alvarez",
    "Castillo",
    "Sanders",
    "Patel",
    "Myers",
    "Long",
    "Ross",
    "Foster",
    "Jimenez",
    "Powell",
    "Jenkins",
    "Perry",
    "Russell",
    "Sullivan",
    "Bell",
    "Coleman",
    "Butler",
    "Henderson",
    "Barnes",
    "Gonzales",
    "Fisher",
    "Vasquez",
    "Simmons",
    "Romero",
    "Jordan",
    "Patterson",
    "Alexander",
    "Hamilton",
    "Graham",
    "Reynolds",
    "Griffin",
    "Wallace",
    "Moreno",
    "West",
    "Cole",
    "Hayes",
    "Bryant",
    "Herrera",
    "Gibson",
    "Ellis",
    "Tran",
    "Medina",
    "Aguilar",
    "Stevens",
    "Murray",
    "Ford",
    "Castro",
    "Marshall",
    "Owens",
    "Harrison",
    "Fernandez",
    "McDonald",
    "Woods",
    "Washington",
    "Kennedy",
    "Wells",
    "Vargas",
    "Henry",
    "Chen",
    "Freeman",
    "Webb",
    "Tucker",
    "Guzman",
    "Burns",
    "Crawford",
    "Olson",
    "Simpson",
    "Porter",
    "Hunter",
    "Gordon",
    "Mendez",
    "Silva",
    "Shaw",
    "Snyder",
    "Mason",
    "Dixon",
    "Munoz",
    "Hunt",
    "Hicks",
    "Holmes",
    "Palmer",
    "Wagner",
    "Black",
    "Robertson",
    "Boyd",
    "Rose",
    "Stone",
    "Salazar",
    "Fox",
    "Warren",
    "Mills",
    "Meyer",
    "Rice",
    "Schmidt",
    "Garza",
    "Daniels",
    "Ferguson",
    "Nichols",
    "Stephens",
    "Soto",
    "Weaver",
    "Ryan",
    "Gardner",
    "Payne",
    "Grant",
    "Dunn",
    "Kelley",
    "Spencer",
    "Hawkins",
    "Arnold",
    "Pierce",
    "Vazquez",
    "Hansen",
    "Peters",
    "Santos",
    "Hart",
    "Bradley",
    "Knight",
    "Elliott",
    "Cunningham",
    "Duncan",
    "Armstrong",
    "Hudson",
    "Carroll",
    "Lane",
    "Riley",
    "Andrews",
    "Alvarado",
    "Ray",
    "Delgado",
    "Berry",
    "Perkins",
    "Hoffman",
    "Johnston",
    "Matthews",
    "Pena",
    "Richards",
    "Contreras",
    "Willis",
    "Carpenter",
    "Lawrence",
    "Sandoval",
    "Guerrero",
    "George",
    "Chapman",
    "Rios",
    "Estrada",
    "Ortega",
    "Watkins",
    "Greene",
    "Nunez",
    "Wheeler",
    "Valdez",
    "Harper",
    "Burke",
    "Larson",
    "Santiago",
    "Maldonado",
    "Morrison",
    "Franklin",
    "Carlson",
    "Austin",
    "Dominguez",
    "Carr",
]

function generateRandomNumber(n: number) {
  let result = '';
  for (let i = 0; i < n; i++) {
    result += Math.floor(Math.random() * 10);
  }
  return result;
}

export const bootstrapContacts = (n: number, progressState?: Ref<number>,  current = 0): Promise<any> => {
    if (current < n) {
        const name = names[Math.floor(Math.random() * names.length)] + " " + names[Math.floor(Math.random() * names.length)]
        const number = generateRandomNumber(10)
        const gender = ['Male', 'Female', 'Other'][Math.floor(Math.random() * 3)] as Contact['gender']
        const profession = ['Arquitect', 'Engineer', 'Doctor'][Math.floor(Math.random() * 3)]
        return IDBTransactionCreateContact({
            name,
            number,
            gender,
            profession
        }).then(() => {
                if (progressState) progressState.value++
                return bootstrapContacts(n, progressState, current + 1)
            })
    }
    else {
        return Promise.resolve()
    }
}
